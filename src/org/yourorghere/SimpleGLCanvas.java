package org.yourorghere;

import com.sun.opengl.util.Animator;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

public class SimpleGLCanvas extends JFrame {
    

    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    
    private Animator animator;
    private static int typeForm = 0;
    private static int typeTransform = -1;
    private static float eixoXRotacao = 0, eixoYRotacao = 0, eixoZRotacao = 0;
    private static float eixoXTranslacao = 0, eixoYTranslacao = 0, eixoZTranslacao = 0;
    private static float valuePerspective = 0;

    /** Creates new form MainFrame */
    public SimpleGLCanvas() {
        initComponents();
        setTitle("3D-projeto");

        canvas.addGLEventListener(new GLRenderer());
        animator = new Animator(canvas);
        animator.start();

        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());  
        
        
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    @Override
                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    @Override
    public void setVisible(boolean show){
        if(!show)
            animator.stop();
        super.setVisible(show);
        if(!show)
            animator.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new JRadioButton();
        JLabel label = new JLabel();
        canvas = new GLCanvas(createGLCapabilites());
        jToggleButton1 = new JToggleButton();
        jLabel1 = new JLabel();
        piramideObj = new JRadioButton();
        cuboObj = new JRadioButton();
        coneObj = new JRadioButton();
        cilindroObj = new JRadioButton();
        labelTransf = new JLabel();
        rotacao = new JRadioButton();
        translacao = new JRadioButton();
        jLabel2 = new JLabel();
        giradorXRotacao = new JSpinner();
        jLabel3 = new JLabel();
        giradorYRotacao = new JSpinner();
        jLabel4 = new JLabel();
        giradorZRotacao = new JSpinner();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jSeparator1 = new JSeparator();
        giradorXTrans = new JSpinner();
        giradorYTrans = new JSpinner();
        giradorZTrans = new JSpinner();
        jSeparator2 = new JSeparator();
        jLabel8 = new JLabel();
        buttonP = new JRadioButton();
        giradorP = new JSpinner();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        label.setText("Projeto 3D - Computação Gráfica");

        jToggleButton1.setText("Clique");
        jToggleButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Informe o objeto");

        piramideObj.setText("Pirâmide");

        cuboObj.setText("Cubo");

        coneObj.setText("Cone");

        cilindroObj.setText("Cilindro");

        labelTransf.setText("Transformação");

        rotacao.setText("Rotação");

        translacao.setText("Translação");

        jLabel2.setText("Eixo X");

        jLabel3.setText("Eixo Y");

        jLabel4.setText("Eixo Z");

        jLabel5.setText("Eixo X");

        jLabel6.setText("Eixo Y");

        jLabel7.setText("Eixo Z");

        jLabel8.setText("Tipo projeção");

        buttonP.setText("Perspectiva");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(piramideObj)
                            .addComponent(cuboObj)
                            .addComponent(coneObj)
                            .addComponent(cilindroObj)
                            .addComponent(labelTransf)
                            .addComponent(rotacao)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                    .addComponent(giradorXRotacao, GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                    .addComponent(giradorYRotacao)
                                    .addComponent(giradorZRotacao)))
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                        .addComponent(jLabel8)
                                        .addComponent(jToggleButton1, GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(ComponentPlacement.RELATED)
                                            .addComponent(giradorYTrans, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(ComponentPlacement.RELATED)
                                            .addComponent(giradorZTrans, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(ComponentPlacement.RELATED)
                                            .addComponent(giradorXTrans, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(translacao)
                                        .addComponent(jSeparator2))
                                    .addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
                                        .addComponent(giradorP, Alignment.LEADING)
                                        .addComponent(buttonP, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(45, 45, 45)
                        .addComponent(canvas, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(label))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(canvas, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(piramideObj)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(cuboObj)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(coneObj)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(cilindroObj)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(labelTransf)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(rotacao)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(giradorXRotacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(giradorYRotacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(giradorZRotacao, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(translacao)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(giradorXTrans, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(giradorYTrans, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(giradorZTrans, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(buttonP)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(giradorP, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jToggleButton1)
                        .addGap(44, 44, 44))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Button to create a graph
    private void jToggleButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        /*valueX = Float.parseFloat(textX.getText());
        valueY = Float.parseFloat(textY.getText());
        valueZ = Float.parseFloat(textZ.getText());*/
        
        if (buttonP.isSelected()) {
            valuePerspective = Float.parseFloat(giradorP.getValue().toString());
        }
        
        if (piramideObj.isSelected() == true && cuboObj.isSelected() == true) {
            // Criar piramide e cubo
            
            typeForm = 5;
            if(rotacao.isSelected()) {
                eixoXRotacao = Float.parseFloat(giradorXRotacao.getValue().toString());
                eixoYRotacao = Float.parseFloat(giradorYRotacao.getValue().toString());
                eixoZRotacao = Float.parseFloat(giradorZRotacao.getValue().toString());
                
                typeTransform = 1;
            }else if (translacao.isSelected()){
                // TRANSLAÇÃO
                eixoXTranslacao = Float.parseFloat(giradorXTrans.getValue().toString());
                eixoYTranslacao = Float.parseFloat(giradorYTrans.getValue().toString());
                eixoZTranslacao = Float.parseFloat(giradorZTrans.getValue().toString());
                typeTransform = 0;
            }
            System.out.println("Pirâmide e CUBO");
        }
        
        else if(piramideObj.isSelected() == true && coneObj.isSelected() == true) {
            // Criar piramide e cone
            typeForm = 6;
        }
        
        else if(piramideObj.isSelected() == true && cilindroObj.isSelected() == true) {
            // Criar piramide e cilindro
            typeForm = 7;
        }
        
        else if(cuboObj.isSelected() == true && coneObj.isSelected() == true) {
            // Criar cubo e cone
            typeForm = 8;
        }
        
        else if(cuboObj.isSelected() == true && cilindroObj.isSelected() == true) {
            // Criar cubo e cilindro
            typeForm = 9;
        }
        
        else if(cilindroObj.isSelected() == true && coneObj.isSelected() == true) {
            // criar Cilindro  e cone
            typeForm = 10;
        }
        
        else if (piramideObj.isSelected() == true) {
            // criar piramide...
            typeForm = 1;
            if(rotacao.isSelected() == true && translacao.isSelected()) {
                eixoXRotacao = Float.parseFloat(giradorXRotacao.getValue().toString());
                eixoYRotacao = Float.parseFloat(giradorYRotacao.getValue().toString());
                eixoZRotacao = Float.parseFloat(giradorZRotacao.getValue().toString());
                eixoXTranslacao = Float.parseFloat(giradorXTrans.getValue().toString());
                eixoYTranslacao = Float.parseFloat(giradorYTrans.getValue().toString());
                eixoZTranslacao = Float.parseFloat(giradorZTrans.getValue().toString());
                
                typeTransform = 1;
            }else if (translacao.isSelected()) {
                // TRANSLAÇÃO
                eixoXTranslacao = Float.parseFloat(giradorXTrans.getValue().toString());
                eixoYTranslacao = Float.parseFloat(giradorYTrans.getValue().toString());
                eixoZTranslacao = Float.parseFloat(giradorZTrans.getValue().toString());
                typeTransform = 0;
            } else if (rotacao.isSelected()) {
                eixoXRotacao = Float.parseFloat(giradorXRotacao.getValue().toString());
                eixoYRotacao = Float.parseFloat(giradorYRotacao.getValue().toString());
                eixoZRotacao = Float.parseFloat(giradorZRotacao.getValue().toString());
                
                typeTransform = 1;
            }

            System.out.println("o objeto foi "+ piramideObj.getText());
        }
        
        else if (cuboObj.isSelected()) {
            typeForm = 2;
            if(rotacao.isSelected()) {
                eixoXRotacao = Float.parseFloat(giradorXRotacao.getValue().toString());
                eixoYRotacao = Float.parseFloat(giradorYRotacao.getValue().toString());
                eixoZRotacao = Float.parseFloat(giradorZRotacao.getValue().toString());
                
                typeTransform = 1;
            }else if (translacao.isSelected()){
                // TRANSLAÇÃO
                eixoXTranslacao = Float.parseFloat(giradorXTrans.getValue().toString());
                eixoYTranslacao = Float.parseFloat(giradorYTrans.getValue().toString());
                eixoZTranslacao = Float.parseFloat(giradorZTrans.getValue().toString());
                typeTransform = 0;
            }
        }
        
        else if (coneObj.isSelected()) {
            // criar piramide...
            typeForm = 3;
            if(rotacao.isSelected()) {
                // ROTAÇÃO
                typeTransform = 1;
            }else if (translacao.isSelected()){
                // TRANSLAÇÃO
                typeTransform = 0;
            }
            System.out.println("o objeto foi "+ coneObj.getText());
        }
        
        else if (cilindroObj.isSelected()) {
            // criar piramide...
            typeForm = 4;
            if(rotacao.isSelected()) {
                // ROTAÇÃO
                typeTransform = 1;
            }else if (translacao.isSelected()){
                // TRANSLAÇÃO
                typeTransform = 0;
            }
            System.out.println("o objeto foi "+ cilindroObj.getText());
        }
        
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {

                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                SimpleGLCanvas frame = new SimpleGLCanvas();
                frame.setVisible(true);
                
                
            }
        });
    }
    
    public static int getTypeForm() {
        return typeForm;
    }
    
    public static int getTypeTransform() {
        return typeTransform;
    }
    
    // Eixos para Rotação
    
    public static float getEixoXRotacao() {
        return eixoXRotacao;
    } 
    
    public static float getEixoYRotacao() {
        return eixoYRotacao;
    }
    
    public static float getEixoZRotacao() {
        return eixoZRotacao;
    }
    
    // Eixos para Translação
    
    public static float getEixoXTranslacao() {
        return eixoXTranslacao;
    }
    
    public static float getEixoYTranslacao() {
        return eixoYTranslacao;
    }
    
    public static float getEixoZTranslacao() {
        return eixoZTranslacao;
        //teste
    }
    
    // Valor para projeção
    
    public static float getPerspective() {
        return valuePerspective;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JRadioButton buttonP;
    private GLCanvas canvas;
    private JRadioButton cilindroObj;
    private JRadioButton coneObj;
    private JRadioButton cuboObj;
    private JSpinner giradorP;
    private JSpinner giradorXRotacao;
    private JSpinner giradorXTrans;
    private JSpinner giradorYRotacao;
    private JSpinner giradorYTrans;
    private JSpinner giradorZRotacao;
    private JSpinner giradorZTrans;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JRadioButton jRadioButton1;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JToggleButton jToggleButton1;
    private JLabel labelTransf;
    private JRadioButton piramideObj;
    private JRadioButton rotacao;
    private JRadioButton translacao;
    // End of variables declaration//GEN-END:variables

}
